// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/andrefebrianto/Search-Movie-Service/movie/delivery/grpc/model"

// MoviesServer is an autogenerated mock type for the MoviesServer type
type MoviesServer struct {
	mock.Mock
}

// GetMovieDetail provides a mock function with given fields: _a0, _a1
func (_m *MoviesServer) GetMovieDetail(_a0 context.Context, _a1 *model.MovieId) (*model.Movie, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Movie
	if rf, ok := ret.Get(0).(func(context.Context, *model.MovieId) *model.Movie); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Movie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.MovieId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchMovies provides a mock function with given fields: _a0, _a1
func (_m *MoviesServer) SearchMovies(_a0 context.Context, _a1 *model.MovieKeywordAndPage) (*model.MovieSearch, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.MovieSearch
	if rf, ok := ret.Get(0).(func(context.Context, *model.MovieKeywordAndPage) *model.MovieSearch); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MovieSearch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.MovieKeywordAndPage) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedMoviesServer provides a mock function with given fields:
func (_m *MoviesServer) mustEmbedUnimplementedMoviesServer() {
	_m.Called()
}
