// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import grpc "google.golang.org/grpc"
import mock "github.com/stretchr/testify/mock"
import model "github.com/andrefebrianto/Search-Movie-Service/movie/delivery/grpc/model"

// MoviesClient is an autogenerated mock type for the MoviesClient type
type MoviesClient struct {
	mock.Mock
}

// GetMovieDetail provides a mock function with given fields: ctx, in, opts
func (_m *MoviesClient) GetMovieDetail(ctx context.Context, in *model.MovieId, opts ...grpc.CallOption) (*model.Movie, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *model.Movie
	if rf, ok := ret.Get(0).(func(context.Context, *model.MovieId, ...grpc.CallOption) *model.Movie); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Movie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.MovieId, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchMovies provides a mock function with given fields: ctx, in, opts
func (_m *MoviesClient) SearchMovies(ctx context.Context, in *model.MovieKeywordAndPage, opts ...grpc.CallOption) (*model.MovieSearch, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *model.MovieSearch
	if rf, ok := ret.Get(0).(func(context.Context, *model.MovieKeywordAndPage, ...grpc.CallOption) *model.MovieSearch); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MovieSearch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.MovieKeywordAndPage, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
